generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @default(cuid())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  email                 String?       @unique
  emailVerified         DateTime?     @map("email_verified")
  name                  String
  image                 String?
  role                  Role          @default(USER)
  isActive              Boolean       @default(true)
  referenceId           String        @unique @default(cuid())
  password              String?
  hasMarketingAgreement Boolean       @default(true)
  hasRODOAgreement      Boolean       @default(true)
  partnerId             String?
  partner               User?         @relation("UserChildren", fields: [partnerId], references: [id])
  children              User[]        @relation("UserChildren")
  payments              Payment[]
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId        String?
  accounts              Account[]
  sessions              Session[]

  @@unique([email, password])
  @@index([id])
}

model Payment {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  userId         String
  subscriptionId String
  amount         Float
  currency       String

  user         User         @relation(fields: [userId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id          String    @id @unique @default(cuid())
  createdAt   DateTime  @default(now())
  name        String
  description String
  price       Float
  currency    String
  period      Int
  isActive    Boolean   @default(true)
  users       User[]
  payments    Payment[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model ContactForm {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  email     String
  message   String
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  ACTIVE_USER
}
